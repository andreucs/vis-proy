---
title: "vis-proy"
format: html
editor: visual
---

```{r}
setwd(".")

list.of.packages <- c("sf", "plotly", "tidyverse", "rnaturalearth", "rnaturalearthhires", "readr", "crosstalk", "stringdist", "mapSpain", "viridis", "shiny", "ggbump")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=TRUE)
```

```{r}
turismo_receptor <- read_delim(
  "data/turismo_receptor_provincia_pais.csv",
  delim = ";",
  locale = locale(decimal_mark = ",", encoding = "ISO-8859-1"),
  col_types = cols(
    AÑO = col_double(),
    MES = col_double(),
    TURISTAS = col_double(),
    ESTANCIA_MEDIA = col_double(),
    PROVINCIA_DESTINO = col_character(),
    CONTINENTE_ORIGEN = col_character(),
    PAIS_ORIGEN = col_character(),
    PERNOCTACIONES = col_double()
  )
)
```

```{r}
turismo_receptor
```

```{r}
turismo_receptor <- turismo_receptor |> 
  filter(!grepl("^Total", PAIS_ORIGEN))
```

```{r}
c <- setdiff(paises, world$name_es)
distance_matrix <- stringdistmatrix(c, world$name_es, method = "jw")

closest_matches <- apply(distance_matrix, 1, function(row) {
  world$name_es[which.min(row)]
})


matches <- data.frame(
  Original = c,
  Match = closest_matches
)
print(matches)

```

```{r}
threshold <- 0.15 # Distancia máxima aceptable
matches <- data.frame(
  Original = c,
  Match = apply(distance_matrix, 1, function(row) {
    if (min(row) <= threshold) world$name_es[which.min(row)] else NA
  })
)


matches <- matches[!is.na(matches$Match), ]

# Mostrar el resultado
print(matches)
```

```{r}
# Comparar métodos
methods <- c("lv", "dl", "jw", "qgram", "cosine", "jaccard")
results <- sapply(methods, function(m) {
  sapply(c, function(x) {
    world$name_es[which.min(stringdist(x, world$name_es, method = m))]
  })
})

# Ver resultados
colnames(results) <- methods
results
```

```{r}
range(world$label_x)
range(world$label_y)  
```

```{r}
world |> 
  mutate(geometry = st_make_valid(geometry)) |> 
  select(geometry) |> 
  mutate(centroid = st_centroid(geometry))
```

```{r}
# tidy

df |> 
  left_join(world, by = c("PAIS_DESTINO" = "name_es"))
```

```{r}
g <- list(
  projection = list(type = 'equirectangular'),
  showland = TRUE,
  landcolor = toRGB("gray95"),
  countrycolor = toRGB("gray80")
)



world <- ne_countries(returnclass = "sf")
spain <- ne_states(country = "Spain", returnclass = "sf")

plot_geo(world) |> 
  add_markers(x=~label_x, y=~label_y)
```

```{r}
w <- highlight_key(world, key=~name)
widgets <- bscols(
  widths = c(12),
  filter_select("country", "Country", w,~name)
)

bscols(
  widths = c(4,8), widgets,
  plot_geo() |> 
  add_markers(
    data = w,
    x = ~label_x,
    y = ~label_y,
    text = ~name,
    marker = list(size = 6, color = "blue"),
    hoverinfo = "text"
  ) |> 
  layout(
    geo = g
)
)
```

## Gráficos

```{r}

hex_prov <- esp_get_hex_prov() |>
  rename(PROVINCIA_DESTINO = ine.prov.name) |>
  select(PROVINCIA_DESTINO, label, codauto, nuts2.name, geom)


hex_prov_coords <- hex_prov$geom |> st_centroid() |> st_coordinates()
hex_prov$X <- hex_prov_coords[, 1]
hex_prov$Y <- hex_prov_coords[, 2]

tur_total_year <- turismo_receptor |>
                  group_by(AÑO, PROVINCIA_DESTINO) |>
                  summarise(m=sum(TURISTAS))

completo <- merge(tur_total_year, hex_prov, by = "PROVINCIA_DESTINO") |>
  st_as_sf()


```

```{r}
completo_filtrado <- completo %>%
  filter(AÑO == 2023) %>% # Filtrar para el año seleccionado
  mutate(rango_turistas = cut(
    m,
    breaks = c(0, 6e6, 9e6, 12e6, 15e6, Inf),
    labels = c("0-6M", "6-9M", "9-12M", "12-15M", "15M+"),
    include.lowest = TRUE
  ))


```

```{r}
plot_ly(source = "hexmap_source", data = completo) |>
  filter(AÑO == 2023) |>  # Filtrar por año seleccionado en Shiny
  add_sf(
    split = ~NULL, # Para que no salga la leyenda por provincias
    color = ~cut(m, 
                 breaks = c(0, 5e5, 1e6, 5e6, 10e6, Inf),
                 labels = c("0k-5k", "5k-1M", "1M-5M", "5M-10M", "10M+")),
    colors = c("#FFEDA0", "#FEB24C", "#FD8D3C", "#FC4E2A", "#E31A1C"), # Colores específicos
    hoveron = "fills",
    hovertext = ~paste("Provincia:", PROVINCIA_DESTINO, "<br>Turistas:", format(m, big.mark = ",")),
    showlegend = TRUE
  ) |>
  add_text(
    data = hex_prov,
    x = ~X,
    y = ~Y,
    text = ~label,
    textfont = list(size = 10, color = "black"),
    showlegend = FALSE
  ) |>
  layout(
    title = list(
      text = paste("Mapa Hexagonal de España - Año", 2023),
      xanchor = "center",
      font = list(size = 20)
    ),
      
    hovermode = "closest",
    legend = list(
      orientation = "h",        # Leyenda en orientación horizontal
      xanchor = "center",       # Centrar la leyenda
      x = 0.5,                  # Posición horizontal
      y = 1.1,
      font = list(size = 8)
    ),
    margin = list(t = 80) # Ajustar el margen superior para la leyenda
  )
```


```{r}







p <- plot_ly() |>
  add_sf(
    data = hex_prov,
    split = ~codauto,
    hoveron = "fills",
    hovertext = ~PROVINCIA_DESTINO,
    line = list(width = 0.5, color = 'black')
  ) |>
  add_text(
    data = hex_prov,
    x = ~X,
    y = ~Y,
    text = ~PROVINCIA_DESTINO,
    textfont = list(size = 7, color = "black"),
    showlegend = FALSE
  ) |>
  layout(
    title = "Plantilla mapa"
  ) |>
  hide_legend()

p
```

```{r}
top5 <- df |> 
        group_by(AÑO, PROVINCIA_DESTINO, PAIS_ORIGEN) |>
        summarise(m=sum(TURISTAS, na.rm=TRUE)) |>
        arrange(desc(m)) |>
        top_n(5)


```

```{r}
datos <- data.frame(
  pais = c("USA", "China", "India", "Russia", "Spain", "Brazil", "UK", "France", "Italy"),
  valor = c(149300000, 140371452, 106950055, 80377636, 56329242, 51719147, 42860928, 36626686, 34282663),
  bandera_url = c(
    "https://flagcdn.com/us.svg",
    "https://flagcdn.com/cn.svg",
    "https://flagcdn.com/in.svg",
    "https://flagcdn.com/ru.svg",
    "https://flagcdn.com/es.svg",
    "https://flagcdn.com/br.svg",
    "https://flagcdn.com/gb.svg",
    "https://flagcdn.com/fr.svg",
    "https://flagcdn.com/it.svg"
  )
)


grafico <- plot_ly(
  data = datos,
  x = ~valor,
  y = ~reorder(pais, valor),
  type = 'bar',
  orientation = 'h',
  marker = list(color = 'rgba(100, 200, 255, 0.7)'),
  text = ~scales::comma(valor), 
  textposition = 'auto'
)

imagenes <- lapply(seq_len(nrow(datos)), function(i) {
  list(
    source = datos$bandera_url[i],
    xref = "x", yref = "y",
    x = datos$valor[i] + max(datos$valor) * 0.06,
    y = datos$pais[i],
    sizex = max(datos$valor) * 0.06,
    sizey = 1,
    xanchor = "left", yanchor = "middle",
    layer = "above"
  )
})


grafico <- grafico |>
  layout(
    title = "Plantilla barras",
    xaxis = list(
      title = "",
      showgrid = FALSE,
      range = c(0, max(datos$valor) * 1.2)
    ),
    yaxis = list(title = "", showgrid = FALSE),
    images = imagenes,
    annotations = list(text = "AÑO", 
                       x = 1,
                       y = 0,
                       xref = "paper", 
                       yref = "paper",
                       showarrow = FALSE, 
                       font = list(size = 100,color = "lightgray"))
  )

grafico
```

Con nuestros datos

```{r}
aggregate_turismo_receptor <- turismo_receptor |>
                              group_by(AÑO, PROVINCIA_DESTINO) |>
                              summarise(m=sum(TURISTAS))
                              
```

```{r}
hex_prov <- esp_get_hex_prov() |>
            rename(PROVINCIA_DESTINO=ine.prov.name) |>
            select(PROVINCIA_DESTINO, label, codauto, nuts2.name)



hex_prov_coords <- hex_prov$geom |> st_centroid() |> st_coordinates()
hex_prov$X <- hex_prov_coords[, 1]
hex_prov$Y <- hex_prov_coords[, 2]


completo <- merge(aggregate_turismo_receptor, hex_prov, by="PROVINCIA_DESTINO") |> st_as_sf() 

env <- completo |> highlight_key(~PROVINCIA_DESTINO)

p <- completo
  plot_ly() |>
  group_by(PROVINCIA_DESTINO) |>
  add_sf(
    data = completo,
    split = ~PROVINCIA_DESTINO,
    hoveron = "fills",
    hovertext = ~PROVINCIA_DESTINO,
    line = list(width = 0.5, color = 'black')
  ) |>
  add_text(
    data = hex_prov,
    x = ~X,
    y = ~Y,
    text = ~PROVINCIA_DESTINO,
    textfont = list(size = 7, color = "black"),
    showlegend = FALSE
  ) |>
  layout(
    title = "Plantilla mapa"
  ) |>
  hide_legend() |>
  highlight(on="plotly_click", selectize = TRUE)

p
```

```{r}
p1 <- plot_ly() |>
     layout(
       title=list(
         text="Profit",
         x=0.5,
         y=0.95,
         xanchor="right",
         font=list(
           size=90
         )
       ),
       xaxis=list(
         showgrid=FALSE,
         zeroline=FALSE,
         showticklabels=FALSE
       ),
       yaxis=list(
         showgrid=FALSE,
         zeroline=FALSE,
         showticklabels=FALSE
       ),
       annotations = list(
         list(text = "76%", 
                       x = 0.12,
                       y = 0.5,
                       xref = "paper", 
                       yref = "paper",
                       showarrow = FALSE, 
                       font = list(size = 160,color = "lightgray")),
          list(text = "76%", 
                       x = 0.12,
                       y = 0,
                       xref = "paper", 
                       yref = "paper",
                       showarrow = FALSE, 
                       font = list(size = 50, color = "lightgreen"))
       )
      )


p2 <- mtcars |> plot_ly(x=~mpg) 

p1
```

```{r}
fig <- plot_ly(
    type = "sankey",
    orientation = "h",

    node = list(
      label = c("Valencia", "Baleares", "Barcelona", "Baleares", "Valencia", "Barcelona"),
      x = c(0.1,0.1,0.1,0.6,0.6,0.6),
      y = c(0.1,0.3,0.6,0.1,0.3,0.6),
      color = c("rgba(0,0,255,0.5)", "blue", "blue", "blue"),
      pad = 15,
      thickness = 20,
      line = list(
        color = "black",
        width = 0.5
      )
    ),

    link = list(
      source = c(0,1,2),
      target = c(4,3,5),
      value =  c(0.1,0.1,0.1)
    )
  )
fig <- fig %>% layout(
    title = "Basic Sankey Diagram",
    font = list(
      size = 10
    )
)

fig
```

```{r}
ocup <- read_csv("data/ocupacion.csv")
```

```{r}
ocup
```

```{r}

df <- ocup %>%
  filter(LUGAR_RESIDENCIA == "Total", PROVINCIA %in% c("Valencia")) %>%
  mutate(date = AÑO + (MES - 1) / 12) |>
  select(date, VIAJEROS, PROVINCIA)


accumulate_by <- function(dat, var) {
  var <- lazyeval::f_eval(var, dat)
  lvls <- plotly:::getLevels(var)
  dats <- lapply(seq_along(lvls), function(x) {
    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
  })
  dplyr::bind_rows(dats)
}


df <- df %>% accumulate_by(~date)


fig <- df %>%
  plot_ly(
    x = ~date, 
    y = ~VIAJEROS,
    frame = ~frame, 
    type = 'scatter',
    mode = 'lines',
    line = list(simplify = F)
  )

fig <- fig %>% layout(
  title = "Evolución de Viajeros en Álava",
  xaxis = list(title = "Fecha (Año Decimal)", zeroline = TRUE, range=c(1999, 2024)),
  yaxis = list(title = "Viajeros", zeroline = TRUE, range=c(0, 500000))
)

# Configuración de la animación
#fig <- fig %>% animation_opts(
#  frame = 50, 
#  transition = 0, 
#  redraw = FALSE
#)
#fig <- fig %>% animation_slider(
#  hide = T
#)
#fig <- fig %>% animation_button(
#  x = 1, xanchor = "right", y = 0, yanchor = "bottom"
#)

subplot(fig,fig) |>
  hide_legend()|>
  animation_opts(
   frame = 50, 
   transition = 0, 
redraw = FALSE
) 

```




```{r}
rank <- read_csv("data/turismo_provincias_rank_bump_top5.csv")
rank
```

```{r}
rank_top_5 <- rank |>
              filter(Position < 6, Province != "Total")


                     
data <- rank_top_5
```



```{r}



p <- plot_ly()

for (provincia in unique(data$Province)) {
  data_provincia <- data %>% filter(Province == provincia)
  
  p <- add_trace(
    p,
    x = data_provincia$Year,
    y = data_provincia$Position,
    mode = "lines+markers",
    name = provincia,
    type = "scatter",
    marker = list(size = 10)
  )
}

annotations <- list()

for (provincia in unique(data$Province)) {
  data_provincia <- data %>% filter(Province == provincia)
  
  annotations <- append(annotations, list(
    list(
      x = min(data_provincia$Year) - 0.2,
      y = data_provincia$Position[data_provincia$Year == min(data_provincia$Year)],
      text = provincia,
      showarrow = FALSE,
      xanchor = "right",
      font = list(size = 12)
    )
  ))
  
  annotations <- append(annotations, list(
    list(
      x = max(data_provincia$Year) + 0.2,
      y = data_provincia$Position[data_provincia$Year == max(data_provincia$Year)],
      text = provincia,
      showarrow = FALSE,
      xanchor = "left",
      font = list(size = 12)
    )
  ))
}


p <- layout(
  p,
  title = "Chupapinga",
  xaxis = list(showgrid = FALSE,
               tickvals=unique(data$Year)),
  yaxis = list(showgrid = FALSE, showticklabels = FALSE),
  legend = list(title = list(text = "Provincias")),
  annotations = annotations
) |> hide_legend()

p
```


```{r}

data_highlight <- highlight_key(data, key = ~Province)

p <- plot_ly(data_highlight)

p <- p %>%
  group_by(Province) %>%
  add_lines(
    x = ~Year,
    y = ~Position,
    name = ~Province,
    mode = "lines+markers",
    marker = list(size = 10),
    text = ~Province
  )


annotations <- list()

for (provincia in unique(data$Province)) {
  data_provincia <- data %>% filter(Province == provincia)
  
  annotations <- append(annotations, list(
    list(
      x = min(data_provincia$Year) - 0.5,
      y = data_provincia$Position[data_provincia$Year == min(data_provincia$Year)],
      text = provincia,
      showarrow = FALSE,
      xanchor = "right",
      font = list(size = 12)
    )
  ))
  
  annotations <- append(annotations, list(
    list(
      x = max(data_provincia$Year) + 0.5, # Margen extra
      y = data_provincia$Position[data_provincia$Year == max(data_provincia$Year)],
      text = provincia,
      showarrow = FALSE,
      xanchor = "left",
      font = list(size = 12)
    )
  ))
}

p <- layout(
  p,
  title = "Chupapinga",
  xaxis = list(
    title = "",
    showgrid = FALSE,
    tickvals = unique(data$Year)
  ),
  yaxis = list(
    showgrid = FALSE,
    showticklabels = FALSE,
    title = ""
  ),
  legend = list(
    title = list(text = "Provincias")
  ),
  annotations = annotations,
  autosize = FALSE,
  width = 800,
  height = 400
) |> hide_legend()


p <- highlight(
  p,
  on = "plotly_click",
  off = "plotly_doubleclick",
  #selectize = T, SHIFT+click emula la accion
  dynamic = T
)


p
```




```{r}
year <- rep(2019:2021, 4)
position <- c(4, 2, 2, 3, 1, 4, 2, 3, 1, 1, 4, 3)
player <- c("A", "A", "A",
            "B", "E", "B", 
            "C", "C", "C",
            "D", "D", "D")

df <- data.frame(x = year,
                 y = position,
                 group = player)



p <- ggplot(rank_top_5, aes(x = Year, y = Position, color = Prov)) +
  geom_bump(size = 1.5) +
  geom_point(aes(text = hover_info), size = 6) +
  geom_text(data = rank_top_5 %>% filter(Year == min(Year)),
            aes(x = Year - 0.1, label = Prov),
            size = 5, hjust = 1) +
  geom_text(data = rank_top_5 %>% filter(Year == max(Year)),
            aes(x = Year + 0.1, label = Prov),
            size = 5, hjust = 0) +
  scale_color_brewer(palette = "RdBu") +
  theme_void() +
  theme(legend.position = "none")

p |> ggplotly(tooltip = "text") |>
       layout(
       title="Mapa",
       xaxis=list(
         showgrid=FALSE,
         zeroline=FALSE,
         showticklabels=FALSE
       ),
       yaxis=list(
         showgrid=FALSE,
         zeroline=FALSE,
         showticklabels=FALSE
       )
      )

```


