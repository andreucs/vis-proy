---
title: "My Dashboard"
format: dashboard
theme: flatly
server: shiny
---

```{r}
#| context: setup
library(readr)
library(plotly)
library(dplyr)
library(sf)
library(mapSpain)
library(bslib)
library(bsicons)
library(forecast)
library(tidyr)


turismo_receptor <- read_delim(
  "data/turismo_receptor_provincia_pais.csv",
  delim = ";",
  locale = locale(decimal_mark = ",", encoding = "ISO-8859-1"),
  col_types = cols(
    AÑO = col_double(),
    MES = col_double(),
    TURISTAS = col_double(),
    ESTANCIA_MEDIA = col_double(),
    PROVINCIA_DESTINO = col_character(),
    CONTINENTE_ORIGEN = col_character(),
    PAIS_ORIGEN = col_character(),
    PERNOCTACIONES = col_double()
  )
) |>
  filter(!grepl("Total", PROVINCIA_DESTINO, ignore.case = TRUE)) |>
  filter(!grepl("Total", PAIS_ORIGEN, ignore.case = TRUE))
  
turismo_receptor$PAIS_ORIGEN <- gsub("^Estados Unidos de América", "EE.UU", turismo_receptor$PAIS_ORIGEN)

turismo_receptor$MES_COD <- factor(turismo_receptor$MES, 
                               levels = 1:12, 
                               labels = c("Ene", "Feb", "Mar", "Abr", "May", "Jun", 
                                         "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"))

ocup <- read.csv("data/ocupacion.csv")

ocup_nacional <- ocup |>
                 filter(LUGAR_RESIDENCIA == "Total") |>
                 select(AÑO, MES, PROVINCIA, PERNOCTACIONES) |>
                 group_by(AÑO, MES) |>
                 summarise(pernoc=sum(PERNOCTACIONES, na.rm = TRUE), .groups = "drop")


data <- ocup_nacional
data$Fecha <- as.Date(paste(data$AÑO, data$MES, "01", sep = "-"))

data_filtered <- ocup_nacional[ocup_nacional$AÑO < 2020, ]

ts_data <- ts(data_filtered$pernoc, start = c(1999, 1), frequency = 12)

modelo <- Arima(ts_data, order = c(1, 0, 2), seasonal = c(0, 1, 1), include.drift = TRUE)

predicciones <- forecast(modelo, h = 42)

data1 <- data |> 
        filter(Fecha >= "2019-1-1", Fecha <= "2023-6-1")

pred <- data.frame(
  fecha = seq(from = as.Date("2020-01-01"), by = "month", length.out = 42),
  pernoc = predicciones$mean
)

data1_filtrado <- data1 %>%
  filter(Fecha %in% pred$fecha)

datos_combinados <- merge(pred, data1_filtrado, by.x = "fecha", by.y = "Fecha", all.x = TRUE)

datos_combinados$ymin <- pmin(datos_combinados$pernoc.x, datos_combinados$pernoc.y, na.rm = TRUE)
datos_combinados$ymax <- pmax(datos_combinados$pernoc.x, datos_combinados$pernoc.y, na.rm = TRUE)

hex_prov <- esp_get_hex_prov() |>
  rename(PROVINCIA_DESTINO = ine.prov.name) |>
  select(PROVINCIA_DESTINO, label, codauto, nuts2.name, geom)

hex_prov_coords <- hex_prov$geom |> st_centroid() |> st_coordinates()
hex_prov$X <- hex_prov_coords[, 1]
hex_prov$Y <- hex_prov_coords[, 2]

tur_total_year <- turismo_receptor |>
                  group_by(AÑO, PROVINCIA_DESTINO) |>
                  summarise(m=sum(TURISTAS))

hex_prov$PROVINCIA_DESTINO <- gsub("^Palmas, Las", "Las Palmas", hex_prov$PROVINCIA_DESTINO)
hex_prov$PROVINCIA_DESTINO <- gsub("^Coruña, A", "A Coruña", hex_prov$PROVINCIA_DESTINO)
hex_prov$PROVINCIA_DESTINO <- gsub("^Rioja, La", "La Rioja", hex_prov$PROVINCIA_DESTINO)
hex_prov$PROVINCIA_DESTINO <- gsub("^Balears, Illes", "Illes Balears", hex_prov$PROVINCIA_DESTINO)

completo <- merge(tur_total_year, hex_prov, by = "PROVINCIA_DESTINO") |>
  st_as_sf()


ccaa <- read.csv("data/Provincias_y_Comunidades_Autonomas.csv", sep=";")
```


# Mapa

## sidebar {.sidebar}

```{r}
selectInput("year", 
            "Año", 
            choices = unique(tur_total_year$AÑO))
```

-------------------------------
**Autores:**

|                             |
|-----------------------------|
| **Andreu Bonet Pavia**      |
| **Anna Gil Moliner**        |
| **Laiqian Ji**              |
| **Ernesto Martínez Gómez**  |            

::: {.callout-note}
## Fuente de Datos
[Segittur API](https://www.dataestur.es/apidata/)
:::
  
## dasboardPanel

### firstRow {height=50%}



```{r}
plotlyOutput("hexmap")
```


```{r}
plotlyOutput("barplot")
```

### secondRow {height=50%}

#### plotContainer {width=55%}

```{r}
#| content: card-sidebar
selectInput("var", 
            "Variable", 
            choices = c("TURISTAS", "ESTANCIA_MEDIA"),
            selected = "ESTANCIA_MEDIA")
```


```{r}
plotlyOutput("violin_plot")
```

# Provincias

## sidebar {.sidebar}

```{r}

exclude_list <- c("Madrid", "Barcelona", "Málaga", "Illes Balears", "Las Palmas")


filtered_choices <- setdiff(unique(turismo_receptor$PROVINCIA_DESTINO), exclude_list)


selectInput("prov_bump", 
            "Añadir provincias:", 
            choices = filtered_choices,
            multiple = T)

selectInput("page3_year",
             "Año",
             choices=c(2019,2020,2021,2022,2023))
```

##

```{r}
plotlyOutput("bump_chart")
```


```{r}
plotlyOutput("province_barplot")
```


# Hoteles

## row {height=60%}

```{r}
#| content: card-sidebar

#selectInput("year", "Año", choices = c("Si", "No"))

```


### containerAnimated {width="50%"}
```{r}
plotlyOutput("animated")
```


### containerLoli {width="50%"}

```{r}
#| content: card-sidebar
selectInput("year_loli", 
            "AÑO", 
            choices = c(2010, 2011, 2012, 2013),
            selected = 2010)
```


```{r}
plotlyOutput("lollipop")
```

## Row {height=40%}


### containerArima {width="45%"}

```{r}
plotlyOutput("arimaPlot")

```

### containerBarras {width="55%"}
```{r}
#| padding: 0px

plotlyOutput("linePlot")
```


```{r}
#| context: server

source("server/data_transformations.R")
source("server/filter_functions.R")
source("server/hexmap_render.R")
source("server/barplot_click_render.R")
source("server/covid_events_render.R")
source("server/pred_vs_real.R")
source("server/render_violin_plot.R")
source("server/render_bump_chart.R")
source("server/render_barchart_contrib_selected.R")
source("server/render_animated_bubble.R")
source("server/render_lollipop.R")

filtered_data <- get_filtered_data(input, completo)

colores <- list(
  color1 = "#c6ffcf",
  color2 = "#98e2c3",
  color3 = "#6ac2b0",
  color4 = "#449f9f",
  color5 = "#2d7d8c",
  color6 = "#1a5c73",
  color7 = "#103c5c",
  color8 = "#490084",
  color9 = "#88009d"
)
render_hexmap(output, input, completo, hex_prov)

render_barplot(output, input, turismo_receptor, hex_prov, color=colores$color4)

covid_events_render(output, data)

render_pred_vs_real(output, data1, pred, datos_combinados)

render_violin_plot(output, input, turismo_receptor, hex_prov)

render_bump_chart(output, input, get_ranking_provinces, create_inverted_ranking, turismo_receptor)

render_barchart_contrib_selected(output, input, turismo_receptor)

render_animated_bubble(output, input, ocup, color_residentes = colores$color5, color_extranjeros = colores$color9)

render_lollipop(output, input, ocup, ccaa)
```

