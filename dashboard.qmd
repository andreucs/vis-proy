---
title: "My Dashboard"
format: dashboard
theme: minty
server: shiny
---


```{r}
#| context: setup
library(readr)
library(plotly)
library(dplyr)
library(sf)
library(mapSpain)
library(bslib)
library(bsicons)
library(forecast)

turismo_receptor <- read_delim(
  "data/turismo_receptor_provincia_pais.csv",
  delim = ";",
  locale = locale(decimal_mark = ",", encoding = "ISO-8859-1"),
  col_types = cols(
    AÑO = col_double(),
    MES = col_double(),
    TURISTAS = col_double(),
    ESTANCIA_MEDIA = col_double(),
    PROVINCIA_DESTINO = col_character(),
    CONTINENTE_ORIGEN = col_character(),
    PAIS_ORIGEN = col_character(),
    PERNOCTACIONES = col_double()
  )
)

ocup <- readxl::read_excel("data/eoh_ccaa.xlsx")

ocup_nacional <- ocup |>
                 filter(LUGAR_RESIDENCIA == "Total") |>
                 select(AÑO, MES, CCAA, PERNOCTACIONES) |>
                 group_by(AÑO, MES) |>
                 summarise(pernoc=sum(PERNOCTACIONES, na.rm = TRUE), .groups = "drop")

data <- ocup_nacional
data$Fecha <- as.Date(paste(data$AÑO, data$MES, "01", sep = "-"))

data_filtered <- ocup_nacional[ocup_nacional$AÑO < 2020, ]

ts_data <- ts(data_filtered$pernoc, start = c(1999, 1), frequency = 12)

modelo <- Arima(ts_data, order = c(1, 0, 2), seasonal = c(0, 1, 1), include.drift = TRUE)


predicciones <- forecast(modelo, h = 42)

data1 <- data |> 
        filter(Fecha >= "2019-1-1", Fecha <= "2023-6-1")

pred <- data.frame(
  fecha = seq(from = as.Date("2020-01-01"), by = "month", length.out = 42),
  pernoc = predicciones$mean
)


data1_filtrado <- data1 %>%
  filter(Fecha %in% pred$fecha)

datos_combinados <- merge(pred, data1_filtrado, by.x = "fecha", by.y = "Fecha", all.x = TRUE)


datos_combinados$ymin <- pmin(datos_combinados$pernoc.x, datos_combinados$pernoc.y, na.rm = TRUE)
datos_combinados$ymax <- pmax(datos_combinados$pernoc.x, datos_combinados$pernoc.y, na.rm = TRUE)

## Bump



hex_prov <- esp_get_hex_prov() |>
  rename(PROVINCIA_DESTINO = ine.prov.name) |>
  select(PROVINCIA_DESTINO, label, codauto, nuts2.name, geom)


hex_prov_coords <- hex_prov$geom |> st_centroid() |> st_coordinates()
hex_prov$X <- hex_prov_coords[, 1]
hex_prov$Y <- hex_prov_coords[, 2]

tur_total_year <- turismo_receptor |>
                  group_by(AÑO, PROVINCIA_DESTINO) |>
                  summarise(m=sum(TURISTAS))

completo <- merge(tur_total_year, hex_prov, by = "PROVINCIA_DESTINO") |>
  st_as_sf()
```


# Page 1

## sidebar {.sidebar}

```{r}
selectInput("year", "Año", choices = unique(tur_total_year$AÑO))
```

-------------------------------
**Autores:**

|                             |
|-----------------------------|
| **Andreu Bonet Pavia**      |
| **Anna Gil Moliner**        |
| **Laiqian Ji**              |
| **Ernesto Martínez Gómez**  |            

## dasboardPanel

### firstRow {height=50%}

#### hexMap {width=45%}

```{r}
plotlyOutput("hexmap")
```

#### kpiLayout {width=55%}

##### kpiOnly {height=40%}

```{r}
value_box(
  title="Customer",
  value="$5000"
)
```

```{r}
value_box(
  title="Customer",
  value="$5000"
)
```

```{r}
value_box(
  title="Customer",
  value="$5000"
)
```


##### kpicharts {height=60%}

hello

```{r}
plotlyOutput("barplot")
```

### secondRow {height=50%}

#### {width=55%}



```{r}
plotlyOutput("barplot")
```

# Page 2 



## row {height=45%}

```{r}
#| content: card-sidebar

selectInput("year", "Año", choices = c("Si", "No"))

```

```{r}
#| title: "Hola"
#| padding: 0px
plot(iris)
```

## tabs { .tabset }

### Tab 1

####

```{r}
#| width: 50%
#| padding: 0px

plotlyOutput("linePlot")
```

###### 

```{r}
#| content: valuebox


list(
  title="",
  color = "primary"
)
```

### Tab 2 

```{r}
#| width: 50%
#| padding: 0px
#| fig-cap: "Hola"


plotlyOutput("arimaPlot")

```

#### 

```{r}
#| content: valuebox


list(
  title="pixa",
  color = "primary",
  value = 200

)
```

```{r}
#| content: valuebox

list(
  title="pixa", 
  color = "primary",
  value = 200

)
```


# Page 3

## sidebar {.sidebar}

```{r}
selectizeInput("year", "Año", choices = unique(tur_total_year$AÑO), multiple=T)
```

```{r}
#| context: server

source("server/filter_functions.R")
source("server/hexmap_render.R")
source("server/barplot_click_render.R")
source("server/covid_events_render.R")
source("server/pred_vs_real.R")


filtered_data <- get_filtered_data(input, completo)

render_hexmap(output, input, filtered_data, hex_prov)

render_barplot(output, input, turismo_receptor, hex_prov)

covid_events_render(output, data)

render_pred_vs_real(output, data1, pred, datos_combinados)
```